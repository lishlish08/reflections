1) How did viewing a diff between two versions of a file help you spot the bug?

It helped because it's easier when you don't have extra text that you have to go through. Meaning, that instead
of having to read every single line of each file, you can just look at the handful of lines that were changed and
thus making it that much simpler to spot a difference, or typo as was the case here.

2a) Where do versions come from?

I'd say most people know what version control is, at least abjectively, but when someone mentions git, or
a similar program, we think of it as a huge endeavor. All git does it handle the tracking of the history
of your file(s) for you.

2) How could having access to the entire history of a file make you a more efficient programmer in the long term?

Just as we did in lesson 1, you can compare different versions of something to better understand where you made
a mistake. Or maybe you just want to make something look the way it looked before because you don't like the
current style. Having access to the entire history can also help you visualize how you;ve improved overtime.

3) What do you think are the pros and cons of manually choosing when to create
a commit, like you do in Git, vs having versions automatically saved,
like Google Docs does?

pros: - gets rid of the useless versions that don't have much change between
one another (as in there won't be a whole version saved just because you
added a period at the end of a sentence)

cons: - waiting too long to commit something
- not commit'ing often enough

4) Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file
separately?

I think that because VCSs such as Google Docs aren't necessarily built to cater
to coders, then they don't expect that files will be interwoven so closely like
an HTML and a CSS file might be. Because Git is tailored to coders, then it makes
sense that it does take these relationships into account. It also probably has
to do with the fact that these multiple files are already bundled together (as
is usually the case for a project), and therefore it's easier for it to identify
these dependencies.

5) How can you use the commands git log and git diff to view the history of files?

git log allows you to see each individual commit along with a brief description;
this is helpful because it's just a little snapshot of what was changed. With git diff
you can actually go in and compare two different versions of the file, and see what was
changed code-wise.

6) How might using version control make you more confident to make changes that could
break something?

There's no need to really worry about "breaking" something so long as you have a way to
seamlessly restore the previous /working/ version of your program. This is why it's
important to not wait too long between commits, but also to not have commits every 5 seconds.

7) Now that you have your workspace set up, what do you want to try using Git for?

Definitely want to make it a habit of using git for any and every single one of my
coding projects, but I might also try and make it a habit to use it for anything
that it can be used for. I do enjoy using a command line like bash; it's fun and
makes me seem even more tech-savvy (lol).
