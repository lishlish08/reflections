1) When would you want to use a remote repository rather than keeping all your
work local?

A remote would be helpful when you have other people that will work on the same
project. Also when you want to be able to access your project from multiple
machines (this is just one of the many ways that you could do it, just like you
could remote login to your pc, or use a cloud service to host it [which is
kind of the same thing here], etc).

2) Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

When you pull, this might create a conflict with one or more of your files, and
thus by doing it manually you can prevent the headache of having to possibly
deal with this. Also, maybe the extra files that you added on a remote are not
necessary for your program to run, and you don't want to waste the extra storage
space for it right now.

3) Describe the differences between forks, clones, and branches. When would you
use one instead of another?

A fork creates a copy of an existing repository, but the fork only exists in
GitHub's servers. Now, you can clone the fork onto your computer, thus creating
a local copy of it onto your computer. With a fork, your commits will not show
up in the commit history of the original repository, neither will the original
author's commits show up in your forked repository. With a branch, this can
exist locally or you can also push it to your GitHub.

4) What is the benefit of having a copy of the last known state of the remote
stored locally?

Having a copy of the remote is beneficial because it helps for things such as
conflict resolution where someone else changed the same line as you, or maybe
there was a change made directly in GitHub that you never pulled to your local
copy. In the latter case, if you're trying to push the changes from your local
pc, the copy of the remote will prevent things such as potentially messing up
your code.
